/*Console.OutputEncoding = System.Text.Encoding.UTF8;


// PROBLEM

// 1. OBJEKT G√ÖR OUT OF BOUNDS



// SAKER ATT G√ñRA

// 1. Po√§ng-system
// 2. Kunna spara information




// VARIABLER
int[,] √∂vrePlan = new int[8, 8];
int fullrad;
string[] ikoner = { "‚¨ú", "‚¨õ", "üà¥", "C", "D", };
Random t√§rning = new Random();
int po√§ng = 0;
int[,] plan = new int[8, 8];
int[] spelarPos = { 0, 0 };



int[][,] blocks =
{
    new int[,] { { 0, 0 }, { 0, 1 }, { 1, 1 }, { 2, 1 }, { 2, 0 } },
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 1, 2 } },
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 0, 2 } },
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 0, 1 } },
    new int[,] { { 0, 0 } },
    new int[,] { { 0, 0 }, { 1, 0 } },
    new int[,] { { 0, 0 }, { 0, 1 }, { 0, 2 } },
    new int[,] { { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 } },
    new int[,] { { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 } },
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 2, 1 } },
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 } }
};
int[,] blockAnv√§nt = blocks[t√§rning.Next(12)];

for (int i = 0; i < blockAnv√§nt.GetLength(0); i++)
{
    √∂vrePlan[spelarPos[0] + blockAnv√§nt[i, 0], spelarPos[1] + blockAnv√§nt[i, 1]] = 2;
}


// Spel-loop
while (true)
{
    // Skriver ut och refreshar mappen efter varje g√•ng man r√∂r sig eller s√§tter ut n√•got
    Console.Clear();
    Console.WriteLine(Metodish.Karta(ikoner, √∂vrePlan));
    Console.WriteLine();
    Console.WriteLine(Metodish.Karta(ikoner, plan));
    Console.WriteLine();
    Console.WriteLine(po√§ng);

    var key = Console.ReadKey().Key;

    for (int i = 0; i < blockAnv√§nt.GetLength(0); i++)
    {
        √∂vrePlan[spelarPos[0] + blockAnv√§nt[i, 0], spelarPos[1] + blockAnv√§nt[i, 1]] = 0;
    }

    // Funkar inte just nu f√∂r att objekten √§r st√∂rre √§n spelar positionen, f√•r fixa sen

    // Flyttar objekten
    switch (key)
    {
        // Flyttar objekt upp√•t
        case ConsoleKey.W or ConsoleKey.UpArrow when spelarPos[1] > 0:
            spelarPos[1]--;
            break;

        // Flyttar objekt ned√•t
        case ConsoleKey.S or ConsoleKey.DownArrow when spelarPos[1] < 7:
            if (Metodish.R√∂relseRegler(spelarPos, blockAnv√§nt, plan) == true)
            {
                spelarPos[1]++;
            }
            break;

        // Flyttar objekt till v√§nster
        case ConsoleKey.A or ConsoleKey.LeftArrow when spelarPos[0] > 0:
            if (Metodish.R√∂relseRegler(spelarPos, blockAnv√§nt, plan) == true)
            {
                spelarPos[0]--;
            }
            break;

        // Flyttar objekt till h√∂ger
        case ConsoleKey.D or ConsoleKey.RightArrow when spelarPos[0] < 7:
            if (Metodish.R√∂relseRegler(spelarPos, blockAnv√§nt, plan) == false)
            {
                break;
            } else {
                spelarPos[0]++;
            }
            break;

        // S√§tter ut objekten
        case ConsoleKey.Enter:
            bool m√∂jligplats = true;
            for (int i = 0; i < blockAnv√§nt.GetLength(0); i++)
            {
                if (plan[spelarPos[0] + blockAnv√§nt[i, 0], spelarPos[1] + blockAnv√§nt[i, 1]] != 0)
                {
                    m√∂jligplats = false;
                }
            }

            if (m√∂jligplats == true)
            {
                for (int i = 0; i < blockAnv√§nt.GetLength(0); i++)
                {
                    plan[spelarPos[0] + blockAnv√§nt[i, 0], spelarPos[1] + blockAnv√§nt[i, 1]] = 2;
                }
                blockAnv√§nt = blocks[t√§rning.Next(11)];


                // Funkar ej h√§ller
                plan = Metodish.KollaVinst(ikoner, plan, out fullrad);

                if (fullrad == 8)
                {
                    po√§ng++;
                }
            }
            break;
    }




    // Visar ifall man kan s√§tta ut ett objekt eller ej med hj√§lp av svarta ikoner
    for (int i = 0; i < blockAnv√§nt.GetLength(0); i++)
    {

        if (√∂vrePlan[spelarPos[0] + blockAnv√§nt[i, 0], spelarPos[1] + blockAnv√§nt[i, 1]] != plan[spelarPos[0] + blockAnv√§nt[i, 0], spelarPos[1] + blockAnv√§nt[i, 1]])
        {
            √∂vrePlan[spelarPos[0] + blockAnv√§nt[i, 0], spelarPos[1] + blockAnv√§nt[i, 1]] = 1;
        }

        else
        {
            √∂vrePlan[spelarPos[0] + blockAnv√§nt[i, 0], spelarPos[1] + blockAnv√§nt[i, 1]] = 2;
        }
    }

}












//TEMPOR√ÑRT TESTAR ALLT F√ñR EN FORM F√ñR ATT JAG INTE ORKAR SITTA MED DETTA √ÑN

// ALLA FORMER
/*int[][,] f√∂rem√•l = {
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 1, 2 } },
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 0, 2 } },
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 0, 1 } },
    new int[,] { { 0, 0 } },
    new int[,] { { 0, 0 }, { 1, 0 } },
    new int[,] { { 0, 0 }, { 0, 1 }, { 0, 2 } },
    new int[,] { { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 } },
    new int[,] { { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 4 } },
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 }, { 2, 1 } },
    new int[,] { { 0, 0 }, { 1, 0 }, { 1, 1 } }
}; 


// Funkar f√∂r tiden inte,  m√•ste √§ndra senare. Den k√∂r igenom alla, vilket √§r det jag ber den att g√∂ra just nu, men senare ska jag f√• den att k√∂ra random p√• 1 i arrayen.
for (int i = 0; i < f√∂rem√•l.Length; i++)
{
    int[,] IndividF√∂rem√•l = f√∂rem√•l[i];
}


Random random = new Random();

int RandomX = random.Next(f√∂rem√•l.GetLength(0));
int RandomY = random.Next(f√∂rem√•l.GetLength(1));

int spelObjekt = random.Next(RandomX, RandomY);





    for (int a = 0; a < IndividF√∂rem√•l.GetLength(0); a++)
    {
        plan[spelarPos[0] + IndividF√∂rem√•l[a, 0], spelarPos[1] + IndividF√∂rem√•l[a, 1]] = 2;
    } 
*/